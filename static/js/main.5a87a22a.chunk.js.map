{"version":3,"sources":["components/QuoteMachine/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["QuoteMachine","useState","quote","setQuote","fetchQuote","a","fetch","response","json","quotes","min","max","length","randomNumber","Math","floor","random","error","useEffect","style","backgroundColor","className","text","author","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAcA,IAkCeA,EAlCM,WAAO,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAOzB,IAAMC,EAAU,uCAAG,kCAAAC,EAAA,+EAEQC,MAAM,+BAFd,cAETC,EAFS,gBAGMA,EAASC,OAHf,OAGTC,EAHS,OAJMC,EAQgB,EARXC,EAQcF,EAAOG,OAAzCC,EAPDC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,GAAOA,GAQxCR,EAAQO,EAAOI,GACrBV,EAASD,GANM,kDAQfC,EAAS,CAAEc,MAAO,4BARH,kCAJnB,IAAyBP,EAAKC,IAIX,qBAAH,qDAgBhB,OAJAO,qBAAU,WACRd,MACC,IAGD,sBAAKe,MAAO,CAAEC,gBAlCd,OACA,IAAMN,KAAKE,SACX,KACC,GAAK,GAAKF,KAAKE,UAChB,MACC,GAAK,GAAKF,KAAKE,UAChB,MA4B6CK,UAAU,YAAvD,UACE,4BAAInB,EAAMoB,OACV,+BAAOpB,EAAMqB,SACb,wBAAQC,QAASpB,EAAYiB,UAAU,gBAAvC,2BC5BSI,G,MARH,WACV,OACE,8BACE,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a87a22a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport function getColor() {\n  return (\n    'hsl(' +\n    360 * Math.random() +\n    ',' +\n    (25 + 70 * Math.random()) +\n    '%,' +\n    (85 + 10 * Math.random()) +\n    '%)'\n  )\n}\n\nconst QuoteMachine = () => {\n  const [quote, setQuote] = useState({})\n\n  function getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min)\n  }\n\n  const fetchQuote = async () => {\n    try {\n      const response = await fetch('https://type.fit/api/quotes')\n      const quotes = await response.json()\n      const randomNumber = getRandomNumber(0, quotes.length)\n      const quote = quotes[randomNumber]\n      setQuote(quote)\n    } catch (error) {\n      setQuote({ error: 'Failed to fetch a quote' })\n    }\n  }\n\n  useEffect(() => {\n    fetchQuote()\n  }, [])\n\n  return (\n    <div style={{ backgroundColor: getColor() }} className=\"container\">\n      <p>{quote.text}</p>\n      <span>{quote.author}</span>\n      <button onClick={fetchQuote} className=\"new-quote-bnt\">\n        New Quote\n      </button>\n    </div>\n  )\n}\n\nexport default QuoteMachine\n","import React from 'react'\nimport QuoteMachine from '../QuoteMachine'\n\nimport './index.css'\n\nconst App = () => {\n  return (\n    <div>\n      <QuoteMachine />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}